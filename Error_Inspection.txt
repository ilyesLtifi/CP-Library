// Made by https://github.com/mostafa-saad/ArabicCompetitiveProgramming

-------------------------------------------------------------General Inspection-----------------------------------------------

*) Do you Terminate before reading whole input? Do you break while reading, and test case is not fully read?
*) Correct input file / Correct input copy
*) Correctly initialize between test cases
*) Correct reading: E.g. scanf("%d ", &cases); Space is correct in this Input file?
*) Tested corner cases?
*) If you take something from libaray that does not mean it is 100% right
*) If you take something from libaray, Revise its comments & prerequisites
*) Validate:
    *) Input stoping conditions
    *) Functions base case / Problem Logic Lines.
    *) No TYPO
    *) Used data types enough to avoid overlfow
    *) operators *, ^, /, %
        *) /0, %0, /EPS, (n)%x, (-n)%x, +/- EPS
        *) *, ^, counting problems = Overflow
    *) Results fit in 32bit operations, what about intermediate values?
    *) Correct OO Value. Intial value when u maximize & minimize
    *) x%m is X negative? Given Matrix A, find (A^b)%M, Make sure A is intialized correctly in case negatives
    *) if(x%2 == 1) ..	What if x negative value?
    *) Set or Multiset?
    *) Wrong pair comparisons: pair1 > pair2, does not check both elements for larger
    *) truncate or approximate, double issues, watch out from -0.0, Floor(-2.3) = -3 but Floor(2.3)= 2
    *) not a number(NAN) which comes from sqrt(-ve), (0/0) ,or cos(1.00000000001) or cos(-1.000000000001)
    *) lp(i, n) lp(j, i+1, n):  is there at least 2 elements? Do you need special handling?
*) Percision problems
    *) You should calculate the worst percicion. E.g. 1 / 10^9 / 10^5.
    *) Avoid doubke operations if possible: e.g. integer floor & ceil - even with indepth replacement.
    *) try to do double operations as local as possilbe
        *) e.g. sum all vs sum part + call(nxt)
    *) couting the doubles changes little thier value
    *) Do binary search to 9 precision, and display x*100. output is only 7 precision
*) BFS with more than one start state
    *) Make sure they are all of same depth
    *) Make sure, In case lexi answer, that you use priority queue
    *) Do we need to validate the intial states?
	
	
-------------------------------------------WA-------------------------------

*) Pick a moderated examples, and do problem semantic tracing.
	
*) Sometimes your added tricky code to make programming easier is just a KILLER BUG
    *) TRY to validate your fancy added code to avoid debugging for silly mistakes
    *) E.g appending a 2d strings array to make it a complete 2d.
        *) Take care, is the appended character part of input? Does it matter?
			
*) If u have direction array, Does order matters?
			
*) OVERFLOW
    *) Read numbers N < 2^M where M = 60
    *) Manpulating bit masks with N >= 32, E.g. 1<<40
    *) Multiplications( cross product ) & powers & Base conversions.
    *) Is whole code handeled for OVERFLOW or it is a mix of int and LL ?!
        *) 1<<x or 1LL<<x
    *) Correct overflow handling
        *) E.g use if( a*b > OO)  or  if( a > OO/b)
        *) E.g use if( a+b > OO)  or  if( a > OO-b)
    *) Input is a 32 integer bit
        *) yes, using int x; will be sufficient, but take care from Integer range
        *) int x;	cin>>x;	x = -x;			code(x);
        *) What if x value = -2^31 --> -x = 2^31  which is OVERFLOW
    *) Exhaustive adding
    *) Final answer fit in 32bit but intermediate results don't (e.g. polynomial evaluation)
	
*) Wrong stoping conditions.
    *) Test ends with TestEnd and input with InputFinish. What if such words inside the main input also.
    *) You may need to read 5 numbers if any is valid, u alert
        *) lp(i, 5) { cin>>x;	if(!valid(x)) { ok = 0; break;} --> What about output REMINDER?
    *) Read until number is less than 0, if(n==-1) break  --> if(n<0) break;
    *) Read until x & y & z be zero
    *) Read until one of x or or z is zero
    *) Read untill Input L, U is L = U = -1
        *) Stop if(L == -1 && U == -1)	break;
        *) Check if input like L = -2, U = 3 is valid or not
        *) E.g Number of primes in range [-2,3] = 2
    *) Each block will be terminated by a line starting with e.
        *) e
        *) egg
    *) Each block will be terminated by a line containing #.
        *) #
        *) Is this tricky #?
			
*) Tricky text description
    *) word is "sequence of upper/lower case letters.
        *) This means ali is 1 word, X-Ray is 2 words, ali's book is 3 words
    *) Given 2 integers i, j, find number of primes between them, or in RANGE
        *) Input can be 4 200 OR 200 4
    *) Given N*M grid, Read N lines each start with M chars. E.g. 3*2
        *)1st line -> ab
        *)2nd line -> cdEXTRA		// use to depend on read N, M, as RE may happen
        *)3rd line -> ef				
    *) Do not accept leading zeros numbers?
        *) Do not accept 004, but accept 0 (special case)  		
	
*) Geometry
    *) Is there duplicate points? Does it matter? Co-linearity?
		
*) Graph
    *) Connected or disconnected?
    *) Directed or Undirected?
    *) SelfLoops?
    *) Multiple edges & their effect (MaxFlow sum, SP min)
		
*) Percision
    *) Watchout -0.0
    *) int x = (int)(a +/- EPS) depends on a > 0 | a < 0.
		
-----------------------------------TLE--------------------------------------	
	
*) May be bug and just infinite loop
*) Can results precomputed in table?!!!!
*) Function calls, may need refrence variables.
*) % is used extensivly? memset is used extensivly?
*) What is blocks of code that reprsent order? Do we just need to optimize it?
	
*) Big Input file
    *) Need scanf & printf
    *) Optimize code operations
    *) Switch to arrays and char[]	

*) DP Problems
    *) Do you clear each time while it is not needed?
    *) Clear only part of memory u need, not all of memo or use boolean array
    *) The base case order is not O(1)
        *) make sure if(memo != -1) before base case
    *) Use effective base conditions
        *) E.g If you are sure dp(0, M) is X, do not wait untill Dp(0,0)
    *) DP state did not change, so infinite loop
        *) DP(i) call DP(i+s) where s [0-4]
    *) Return result % 10^7, So each time you do operation, you apply %
        *) if DP is huge, change to while(ans >= 10^7) ans -= 10^7
        *) If mod is 2^p-1, use bitwise
				
*) BackTracking
    *) If you have diffrent ways to do it, try to do what minimize stack depth
    
*) Graph problems
    *) Generate dynamic sub-states (edges) only when necessary
		
----------------------------------RTE------------------------------------	
		
*) Correct input file?
*) Array index out of bondry

*) Make sure to have correct array size. E.g. If indexing N 1 based, arr[N+1].
*) Make sure no wrong indexing < 0 || x >= n
    *) Find Primes in range[-2, 3]
    *) Find factorial -5!
*) In DP, memo[X][Y], check you access dimensions correctly
*) In DP, if u have invald states, make sure to filter them before checking the memo
*) Stack overflow from infinite recursion
    *) Visited array not marked correctly
    *) DP with cyclic \ wrong recurrence
*) You have data structures that requires huge data
*) /0, %0
*) Extensive memory allocating until RTE
*) Using incorrect compare function (e.g. return that return (A, B) same answer as (B, A) )
*) Use unintialized data: int x; v.resize(x);	cin>>x;
*) Watchout, if multiset contains (3 3 3 3 6 9) and u delete 3 -->will be (6, 9)
    *) To delete one item, use iterator to find & delete it
*) struct T {	int A[];	};
